[service]
# The name of user/group Spectrum runs as.
user = spectrum
group = spectrum

# JID of Spectrum instance.
jid = ${SPECTRUM_HOSTNAME}

# Password used to connect the XMPP server.
password = ${SPECTRUM_PASSWORD}

# XMPP server to which Spectrum connects in gateway mode.
server = ${SPECTRUM_XMPP_HOST}

# XMPP server port.
port = 5347

# Interface on which Spectrum listens for backends.
# backend_host = 127.0.0.1

# Port on which Spectrum listens for backends.
# By default Spectrum chooses random backend port and there's no need to change it normally
# backend_port = 10001

# Number of users per one legacy network backend.
users_per_backend = 10

# Full path to backend binary.
backend = /usr/bin/spectrum2_libpurple_backend

# Choice of "protocol=any" means that user sets his protocol in his JID which has to be in following format: protocol.username@domain.tld
# So for example: prpl-jabber.hanzz.k%gmail.com@domain.tld
protocol = ${SPECTRUM_PROTOCOL}

# If enabled, your legacy network buddies will be removed when you unsubscribe from them in the XMPP.
# enable_remove_buddy = true

[identity]
# Name of Spectrum instance in service discovery
name = Spectrum Transport (${SPECTRUM_PROTOCOL})

# Type of transport ("msn", "icq", "xmpp").
# Check http://xmpp.org/registrar/disco-categories.html#gateway
type = xmpp

# Category of transport, default is "gateway".
# category = gateway

[logging]
# log4cxx/log4j logging configuration file in ini format used for main spectrum2 instance.
config = /etc/spectrum2/logging.cfg

# log4cxx/log4j logging configuration file in ini format used for backends.
backend_config = /etc/spectrum2/logging.cfg

[database]
# Database backend type
# "sqlite3", "mysql", "pqxx", or "none" without database backend
type = sqlite3

# For SQLite3: Full path to database
# For MySQL and PostgreSQL: name of database
# default database = /var/lib/spectrum2/$jid/database.sql
# database = jabber_transport

# Prefix used for tables
# prefix = jabber_

[registration]
# Enable public registrations
enable_public_registration=${SPECTRUM_REGISTRATION_ENABLED}

# Text to display upon user registration form
# username_label=Jabber JID (e.g. user@server.tld):
# instructions=Enter your remote jabber JID and password as well as your local username and password

# If true a local Jabber account on <local_account_server> is needed for transport registration, the idea
# is to enable public registration from other servers, but only for users, who have already local accounts.
# require_local_account=1
# local_username_label=Local username (without @server.tld):
# local_account_server=localhost
# local_account_server_timeout=10000
